{"version":3,"sources":["components/navbar.js","reducers/itemReducer.js","reducers/index.js","actions/types.js","store.js","actions/itemactions.js","components/ShoppingList.js","components/ItemModal.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","_this","setState","react_default","a","createElement","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","initialState","items","loading","combineReducers","item","arguments","length","undefined","action","type","Object","objectSpread","payload","filter","_id","concat","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","setItemsLoading","ShoppingList","onDelete","id","props","deleteItem","getItems","_this2","ListGroup","TransitionGroup","map","_ref","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","data","delete","ItemModal","modal","onChange","e","defineProperty","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","App","es","components_ItemModal","components_ShoppingList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fe026b9.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Collapse,Navbar,NavbarToggler,NavbarBrand,Nav,NavItem,NavLink,Container} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component{\r\n\r\n    state={\r\n        isOpen:false\r\n    }\r\n\r\n    toggle=()=>{\r\n        this.setState({\r\n            isOpen:!this.state.isOpen\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"https://github.com/shauryamathur\">GitHub</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default AppNavbar;","import {ITEMS_LOADING,GET_ITEMS,ADD_ITEM,DELETE_ITEM} from '../actions/types';\r\n\r\nconst initialState={\r\n    items:[],\r\n    loading:false,\r\n};\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case GET_ITEMS:\r\n            return{\r\n                ...state,\r\n                items:action.payload,\r\n                loading:false\r\n\r\n            };\r\n        case DELETE_ITEM:\r\n            return{\r\n                ...state,\r\n                items:state.items.filter(item=>item._id!==action.payload)\r\n            };\r\n        case ADD_ITEM:\r\n            return{\r\n                ...state,\r\n                items:[...state.items,action.payload]\r\n            };\r\n        case ITEMS_LOADING:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item:itemReducer\r\n});","export const GET_ITEMS='GET_ITEMS';\r\nexport const ADD_ITEM='ADD_ITEM';\r\nexport const ITEMS_LOADING='ITEMS_LOADING';\r\nexport const DELETE_ITEM='DELETE_ITEM';\r\n","import {createStore,applyMiddleware,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState={};\r\n\r\nconst middleware=[thunk];\r\n\r\nconst store =createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","import {ITEMS_LOADING,GET_ITEMS,ADD_ITEM,DELETE_ITEM} from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getItems=()=>dispatch=>{\r\n    dispatch(setItemsLoading());\r\n    axios.get('/api/items').then(res=>\r\n        dispatch({\r\n            type:GET_ITEMS,\r\n            payload:res.data\r\n        })\r\n    );\r\n};\r\n\r\nexport const deleteItem=id=>dispatch=>{\r\n    axios.delete(`/api/items/${id}`)\r\n        .then(res=>\r\n            dispatch({\r\n                type:DELETE_ITEM,\r\n                payload:id\r\n            }));\r\n};\r\n\r\nexport const addItem=item=>dispatch=>{\r\n   axios.post('/api/items',item)\r\n        .then(res=>dispatch({\r\n            type:ADD_ITEM,\r\n            payload:res.data\r\n        }));\r\n};\r\n\r\nexport const setItemsLoading=()=>{\r\n    return{\r\n        type:ITEMS_LOADING\r\n    };\r\n};","import React,{Component} from 'react';\r\nimport {Container,ListGroup,ListGroupItem,Button} from 'reactstrap';\r\nimport {CSSTransition,TransitionGroup} from 'react-transition-group';\r\nimport {connect} from 'react-redux';\r\nimport {getItems,deleteItem} from '../actions/itemactions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ShoppingList extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getItems();\r\n    };\r\n\r\n    onDelete=(id)=>{\r\n        this.props.deleteItem(id);\r\n    };\r\n   \r\n    render(){\r\n        const {items}=this.props.item;\r\n        debugger;\r\n        return(\r\n            <Container>\r\n\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                        {items.map(({_id,name})=>(\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                <ListGroupItem>\r\n                                   <Button\r\n                                   className=\"remove-btn\" color=\"danger\" size=\"sm\" onClick={this.onDelete.bind(this,_id)}>&times;</Button>\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nShoppingList.propTypes={\r\n    getItems:PropTypes.func.isRequired,\r\n    item:PropTypes.object.isRequired,\r\n    onDelete:PropTypes.func\r\n};\r\n\r\nconst mapStateToProps=state=>({\r\n    item:state.item\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,{getItems,deleteItem})(ShoppingList);","import React, { Component } from 'react';\r\nimport {Button,Modal,ModalHeader,ModalBody,Form,FormGroup,Label,Input} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../actions/itemactions';\r\n\r\nclass ItemModal extends Component{\r\n    state={\r\n        modal:false,\r\n        name:''\r\n    }\r\n\r\n    toggle=()=>{\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange=(e)=>{\r\n        this.setState({[e.target.name]:e.target.value});\r\n    }\r\n\r\n    onSubmit=e=>{\r\n        e.preventDefault();\r\n\r\n        const newItem={\r\n            name:this.state.name\r\n        }\r\n\r\n        //Add item via addItem action\r\n        this.props.addItem(newItem);\r\n\r\n        this.toggle();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button color=\"dark\" style={{marginBottom:'2rem'}} onClick={this.toggle}>Add Item</Button>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Add to Shopping List</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Item</Label>\r\n                                <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add Shopping Item\" onChange={this.onChange}/>\r\n                                <Button color=\"dark\" style={{marginTop:'2rem'}} block >Add Item</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    item:state.item\r\n});\r\nexport default connect(mapStateToProps,{addItem})(ItemModal);","import React,{Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppNavbar from './components/navbar';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport  ShoppingList from './components/ShoppingList'\nimport ItemModal from './components/ItemModal';\nimport {Container} from 'reactstrap';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar/> \n           <Container>\n              <ItemModal/>\n              <ShoppingList/>\n          </Container>\n        </div>\n      </Provider>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}